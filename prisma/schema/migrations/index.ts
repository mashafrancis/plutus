// This file was generated by prisma-field-encryption.

import type { PrismaClient } from '../../generated/prisma';
import { migrate as migrateExpense } from './Expense';
import { migrate as migrateIncome } from './Income';
import { migrate as migrateInvestment } from './Investment';
import { migrate as migrateSubscription } from './Subscription';

export interface ProgressReport {
  model: string;
  processed: number;
  totalCount: number;
  performance: number;
}

export type ProgressReportCallback = (
  progress: ProgressReport
) => void | Promise<void>;

export const defaultProgressReport: ProgressReportCallback = ({
  model,
  totalCount,
  processed,
  performance,
}) => {
  const _length = totalCount.toString().length;
  const _pct = Math.round((100 * processed) / totalCount)
    .toString()
    .padStart(3);
};

// --

export type MigrationReport = {
  Subscription: number;
  Expense: number;
  Income: number;
  Investment: number;
};

/**
 * Migrate models sequentially.
 *
 * Processed models:
 * - Subscription
 * - Expense
 * - Income
 * - Investment
 *
 * @returns a dictionary of the number of processed records per model.
 */
export async function migrate(
  client: PrismaClient,
  reportProgress: ProgressReportCallback = defaultProgressReport
): Promise<MigrationReport> {
  const processedSubscription = await migrateSubscription(
    client,
    reportProgress
  );
  const processedExpense = await migrateExpense(client, reportProgress);
  const processedIncome = await migrateIncome(client, reportProgress);
  const processedInvestment = await migrateInvestment(client, reportProgress);
  return {
    Subscription: processedSubscription,
    Expense: processedExpense,
    Income: processedIncome,
    Investment: processedInvestment,
  };
}
