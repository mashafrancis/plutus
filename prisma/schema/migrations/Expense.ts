// This file was generated by prisma-field-encryption.

import {
  defaultProgressReport,
  type ProgressReportCallback,
  visitRecords,
} from 'prisma-field-encryption/dist/generator/runtime';
import type { Expense, PrismaClient } from '../../generated/prisma';

type Cursor = Expense['id'];

export async function migrate(
  client: PrismaClient,
  reportProgress: ProgressReportCallback = defaultProgressReport
): Promise<number> {
  return visitRecords<PrismaClient, Cursor>({
    modelName: 'Expense',
    client,
    getTotalCount: client.expense.count,
    migrateRecord,
    reportProgress,
  });
}

async function migrateRecord(client: PrismaClient, cursor: Cursor | undefined) {
  return await client.$transaction(async (tx) => {
    const record = await tx.expense.findFirst({
      take: 1,
      skip: cursor === undefined ? undefined : 1,
      ...(cursor === undefined
        ? {}
        : {
            cursor: {
              id: cursor,
            },
          }),
      orderBy: {
        id: 'asc',
      },
      select: {
        id: true,
        name: true,
        notes: true,
        price: true,
      },
    });
    if (!record) {
      return cursor;
    }
    await tx.expense.update({
      where: {
        id: record.id,
      },
      data: {
        name: record.name,
        notes: record.notes,
        price: record.price,
      },
    });
    return record.id;
  });
}

/**
 * Internal model:
 * {
 *   "cursor": "id",
 *   "fields": {
 *     "name": {
 *       "encrypt": true,
 *       "strictDecryption": false
 *     },
 *     "notes": {
 *       "encrypt": true,
 *       "strictDecryption": false
 *     },
 *     "price": {
 *       "encrypt": true,
 *       "strictDecryption": false
 *     }
 *   },
 *   "connections": {
 *     "user": {
 *       "modelName": "User",
 *       "isList": false
 *     }
 *   }
 * }
 */
